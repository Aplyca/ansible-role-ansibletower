---
- debug: var=ansibletower verbosity=1
  tags: vars

- name: Download Ansible Tower
  unarchive:
    src: http://releases.ansible.com/ansible-tower/setup/ansible-tower-setup-{{ ansibletower.version }}.tar.gz
    dest: "{{ ansibletower.root }}"
    copy: no
    creates: "{{ ansibletower.root }}/ansible-tower-setup-{{ ansibletower.version }}/setup.sh"

- name: Configure credentials
  template:
    src: inventory.j2
    dest: "{{ ansibletower.root }}/ansible-tower-setup-{{ ansibletower.version }}/inventory"
  register: installed
  no_log: "{{ ansibletower.no_log }}"

- name: Execute upgrade/installation
  become: yes
  shell: "./setup.sh"
  args:
    chdir: "{{ ansibletower.root }}/ansible-tower-setup-{{ ansibletower.version }}"
  when: installed.changed

- name: Copy backup file
  copy:
    src: "{{ ansibletower.backup_file }}"
    dest: "{{ ansibletower.root }}/ansible-tower-setup-{{ ansibletower.version }}/tower-backup-latest.tar.gz"
  when: ansibletower.action == "restore"

- name: Restore backup from S3
  s3:
    bucket: "{{ ansibletower.backup_bucket }}"
    object: "{{ ansibletower.backup_file }}"
    dest: "{{ ansibletower.root }}/ansible-tower-setup-{{ ansibletower.version }}/tower-backup-latest.tar.gz"
    mode: get
  when: ansibletower.action == "restores3"

- name: Restore Backup
  become: yes
  shell: "./setup.sh -r tower-backup-latest.tar.gz"
  args:
    chdir: "{{ ansibletower.root }}/ansible-tower-setup-{{ ansibletower.version }}"
  when: ansibletower.action == "restore" or ansibletower.action == "restores3"
